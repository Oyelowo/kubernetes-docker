# We could have an entirely different prod setupp without the /sockjs part
upstream client {
    server client:3000;
}

upstream api {
    server api:5000;
}

server {
    listen 80;
    
    # For getting static files at `/` i.e, nginx routes requests from `/` to the react server which is also taken care of by nginx in prod
    location / {
        # We are able to use the host name - client - as out host here because it is what is specified in our docker-compose service
        proxy_pass http://client;
    }

    # route websocket. This is for development to prevent websocket eerror in local developlemt. 
    location /sockjs-node {
        proxy_pass http://client;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

    #requests from the react app is sent from `/api/...`. So, nginx, knows to route this to the expiress server
    location /api {
        # This allows us to make requests from the react app like `fetch('/api/books/:id')`. 
        # In `/api/(.*)`, (.*) would be books/:id for route - `/api/books/:id`. 
        # So, what we are doing below is to replace /api/books/:id' with /books/:id'
        # which is why we don't have to prefix our server's routes with /api 
        rewrite /api/(.*) /$1 break;
        # We are able to use the host name - api - as out host here because it is what is specified in our docker-compose service
        proxy_pass http://api;
    }
}